trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Container registry information
  containerRegistry: 'MyContainer23Registry'
  containerRepository: 'SW_Assignment1'
  containerTag: '$(Build.BuildId)'
  containerImageName: '$(containerRegistry)/$(containerRepository):$(containerTag)'
  # ACI information
  aciResourceGroup: 'MyResourceGroup'
  aciName: 'mycontainerinstance'
  aciRegion: 'West US'

stages:
- stage: BuildAndTest
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(containerRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(containerTag)
          latest
      displayName: 'Build Docker image'

    - task: Docker@2
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(containerRepository)'
        command: 'push'
        tags: |
          $(containerTag)
          latest
      displayName: 'Push Docker image'

    - script: |
         python -m venv env
         source env/bin/activate
         /usr/bin/python -m pip install --upgrade pip
         /usr/bin/python -m pip install -r requirements.txt
         /usr/bin/python -m pip install pytest
      displayName: 'Install dependencies'

    - task: Bash@3
      inputs:
        targettype: 'inline'
        script: 'pytest -v test_add_numbers.py --junitxml=test_results.xml'
      displayName: 'Run acceptance tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test_results.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish acceptance test results'

- stage: DeployToStaging
  displayName: 'Deploy to Staging'
  dependsOn: BuildAndTest
  condition: succeeded()
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging'
    environment:
      name: 'Staging'
 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'MyServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Deploy to staging environment
                # ...

- stage: DeployToProduction
  displayName: 'Deploy to Production'
  dependsOn: DeployToStaging
  condition: succeeded()
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production'
    environment:
      name: 'Production' 

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'MyServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Deploy to production environment
                # ...
    timeoutInMinutes: 1440 # 24 hours